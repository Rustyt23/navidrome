import React, { useState } from 'react'
import {
  ReferenceManyField,
  ShowContextProvider,
  useShowContext,
  Filter,
  SearchInput,
  useShowController,
  Pagination,
} from 'react-admin'
import { makeStyles } from '@material-ui/core/styles'
import PlaylistDetails from './PlaylistDetails'
import PlaylistSongs from './PlaylistSongs'
import PlaylistActions from './PlaylistActions'
import { Title, List, canChangeTracks } from '../common'

const useStyles = makeStyles(
  () => ({
    playlistActions: {
      width: '100%',
    },
  }),
  { name: 'NDPlaylistShow' }
)

const PlaylistShowFilter = ({ setSearchQuery, ...props }) => {
  return (
    <Filter {...props} variant="outlined">
      <SearchInput
        id="search"
        source="title"
        alwaysOn
        onChange={(e) => {
          console.log("Search Query Updated: ", e.target.value);
          setSearchQuery(e.target.value);
        }}
      />
    </Filter>
  )
}

const PlaylistShowLayout = (props) => {
  const { loading, ...context } = useShowContext(props)
  const { record } = context
  const classes = useStyles()
  const [searchQuery, setSearchQuery] = useState('')

  console.log("Current Search Query: ", searchQuery);
  console.log("Current Record Data: ", record);
  
  return (
    <>
      {record && <PlaylistDetails {...context} />}
      {record && (
        <>
          <PlaylistShowFilter {...context} setSearchQuery={setSearchQuery} />
          <ReferenceManyField
            {...context}
            addLabel={false}
            reference="playlistTrack"
            target="playlist_id"
            sort={{ field: 'id', order: 'ASC' }}
            perPage={100}
            filter={{ playlist_id: props.id, title: searchQuery }}
          >
            <PlaylistSongs
              {...props}
              readOnly={!canChangeTracks(record)}
              title={<Title subTitle={record.name} />}
              actions={
                <PlaylistActions
                  className={classes.playlistActions}
                  record={record}
                />
              }
              resource="playlistTrack"
              exporter={false}
              pagination={<Pagination rowsPerPageOptions={[100, 250, 500]} />}
            />
          </ReferenceManyField>
        </>
      )}
    </>
  )
}

const PlaylistShow = (props) => {
  const controllerProps = useShowController(props)

  return (
    <ShowContextProvider value={controllerProps}>
      <PlaylistShowLayout {...props} {...controllerProps} />
    </ShowContextProvider>
  )
}

export default PlaylistShow
